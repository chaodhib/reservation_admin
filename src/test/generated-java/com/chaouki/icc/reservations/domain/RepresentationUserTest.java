/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package com.chaouki.icc.reservations.domain;

import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.util.*;

import org.junit.Test;

import com.chaouki.icc.reservations.util.ValueGenerator;

/**
 * Basic tests for RepresentationUser
 */
@SuppressWarnings("unused")
public class RepresentationUserTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        RepresentationUser model = new RepresentationUser();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        RepresentationUser model = new RepresentationUser();
        model.setId(ValueGenerator.getUniqueInteger());
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  RepresentationUser.user ==> Users.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setUser() {
        RepresentationUser many = new RepresentationUser();

        // init
        Users one = new Users();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setUser(one);

        // make sure it is propagated properly
        assertThat(many.getUser()).isEqualTo(one);

        // now set it to back to null
        many.setUser(null);

        // make sure null is propagated properly
        assertThat(many.getUser()).isNull();
    }

    @Test
    public void manyToOne_setRepresentation() {
        RepresentationUser many = new RepresentationUser();

        // init
        Representations one = new Representations();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setRepresentation(one);

        // make sure it is propagated properly
        assertThat(many.getRepresentation()).isEqualTo(one);

        // now set it to back to null
        many.setRepresentation(null);

        // make sure null is propagated properly
        assertThat(many.getRepresentation()).isNull();
    }

    /*
    public void equalsUsingPk() {
        RepresentationUser model1 = new RepresentationUser();
        RepresentationUser model2 = new RepresentationUser();
    
        Integer id = ValueGenerator.getUniqueInteger();
        model1.setId(id);
        model2.setId(id);
    
        model1.setPlaces(1);
        model2.setPlaces(1);
        assertThat(model1.isIdSet()).isTrue();
        assertThat(model2.isIdSet()).isTrue();
        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
        assertThat(model1).isEqualTo(model2);
        assertThat(model2).isEqualTo(model1);
    }
     */
}