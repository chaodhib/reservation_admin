/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Types;
import com.chaouki.icc.reservations.domain.Types_;
import com.chaouki.icc.reservations.web.domain.support.GenericSearchForm;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Types}.
 * It exposes a {@link Types} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class TypesSearchForm extends GenericSearchForm<Types, Integer, TypesSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Types types = new Types();
    protected PropertySelector<Types, String> typeSelector = newPropertySelector(Types_.type);

    public Types getTypes() {
        return types;
    }

    @Override
    protected Types getEntity() {
        return getTypes();
    }

    @Override
    public TypesSearchForm newInstance() {
        return new TypesSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.property(typeSelector);
        return sp;
    }

    @Override
    public void resetWithOther(TypesSearchForm other) {
        this.types = other.getTypes();
        this.typeSelector = other.getTypeSelector();
    }

    // Property selectors
    public PropertySelector<Types, String> getTypeSelector() {
        return typeSelector;
    }
}
