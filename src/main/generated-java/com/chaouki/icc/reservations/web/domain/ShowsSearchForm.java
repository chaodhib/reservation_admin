/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;
import static com.jaxio.jpa.querybyexample.Range.newRange;

import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Locations;
import com.chaouki.icc.reservations.domain.Shows;
import com.chaouki.icc.reservations.domain.Shows_;
import com.chaouki.icc.reservations.web.domain.support.GenericSearchForm;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.Range;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Shows}.
 * It exposes a {@link Shows} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class ShowsSearchForm extends GenericSearchForm<Shows, Integer, ShowsSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Shows shows = new Shows();
    protected Range<Shows, Double> priceRange = newRange(Shows_.price);
    protected Range<Shows, Integer> extIdRange = newRange(Shows_.extId);
    protected PropertySelector<Shows, String> slugSelector = newPropertySelector(Shows_.slug);
    protected PropertySelector<Shows, String> titleSelector = newPropertySelector(Shows_.title);
    protected PropertySelector<Shows, String> posterUrlSelector = newPropertySelector(Shows_.posterUrl);
    protected PropertySelector<Shows, Boolean> bookableSelector = newPropertySelector(Shows_.bookable);
    protected PropertySelector<Shows, Double> priceSelector = newPropertySelector(Shows_.price);
    protected PropertySelector<Shows, Integer> extIdSelector = newPropertySelector(Shows_.extId);
    protected PropertySelector<Shows, Locations> locationSelector = newPropertySelector(Shows_.location);

    public Shows getShows() {
        return shows;
    }

    @Override
    protected Shows getEntity() {
        return getShows();
    }

    @Override
    public ShowsSearchForm newInstance() {
        return new ShowsSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(priceRange, extIdRange);
        sp.property(slugSelector, titleSelector, posterUrlSelector, bookableSelector, priceSelector, extIdSelector);
        sp.property(locationSelector);
        return sp;
    }

    @Override
    public void resetWithOther(ShowsSearchForm other) {
        this.shows = other.getShows();
        this.priceRange = other.getPriceRange();
        this.extIdRange = other.getExtIdRange();
        this.slugSelector = other.getSlugSelector();
        this.titleSelector = other.getTitleSelector();
        this.posterUrlSelector = other.getPosterUrlSelector();
        this.bookableSelector = other.getBookableSelector();
        this.priceSelector = other.getPriceSelector();
        this.extIdSelector = other.getExtIdSelector();
        this.locationSelector = other.getLocationSelector();
    }

    // Ranges
    public Range<Shows, Double> getPriceRange() {
        return priceRange;
    }

    public Range<Shows, Integer> getExtIdRange() {
        return extIdRange;
    }

    // Property selectors
    public PropertySelector<Shows, String> getSlugSelector() {
        return slugSelector;
    }

    public PropertySelector<Shows, String> getTitleSelector() {
        return titleSelector;
    }

    public PropertySelector<Shows, String> getPosterUrlSelector() {
        return posterUrlSelector;
    }

    public PropertySelector<Shows, Boolean> getBookableSelector() {
        return bookableSelector;
    }

    public PropertySelector<Shows, Double> getPriceSelector() {
        return priceSelector;
    }

    public PropertySelector<Shows, Integer> getExtIdSelector() {
        return extIdSelector;
    }

    // Relation selectors
    public PropertySelector<Shows, Locations> getLocationSelector() {
        return locationSelector;
    }
}
