/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Roles;
import com.chaouki.icc.reservations.domain.Users;
import com.chaouki.icc.reservations.domain.Users_;
import com.chaouki.icc.reservations.web.domain.support.GenericSearchForm;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Users}.
 * It exposes a {@link Users} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class UsersSearchForm extends GenericSearchForm<Users, Integer, UsersSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Users users = new Users();
    protected PropertySelector<Users, String> loginSelector = newPropertySelector(Users_.login);
    protected PropertySelector<Users, String> passwordSelector = newPropertySelector(Users_.password);
    protected PropertySelector<Users, String> firstnameSelector = newPropertySelector(Users_.firstname);
    protected PropertySelector<Users, String> lastnameSelector = newPropertySelector(Users_.lastname);
    protected PropertySelector<Users, String> emailSelector = newPropertySelector(Users_.email);
    protected PropertySelector<Users, String> langueSelector = newPropertySelector(Users_.langue);
    protected PropertySelector<Users, Roles> roleSelector = newPropertySelector(Users_.role);

    public Users getUsers() {
        return users;
    }

    @Override
    protected Users getEntity() {
        return getUsers();
    }

    @Override
    public UsersSearchForm newInstance() {
        return new UsersSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.property(loginSelector, passwordSelector, firstnameSelector, lastnameSelector, emailSelector, langueSelector);
        sp.property(roleSelector);
        return sp;
    }

    @Override
    public void resetWithOther(UsersSearchForm other) {
        this.users = other.getUsers();
        this.loginSelector = other.getLoginSelector();
        this.passwordSelector = other.getPasswordSelector();
        this.firstnameSelector = other.getFirstnameSelector();
        this.lastnameSelector = other.getLastnameSelector();
        this.emailSelector = other.getEmailSelector();
        this.langueSelector = other.getLangueSelector();
        this.roleSelector = other.getRoleSelector();
    }

    // Property selectors
    public PropertySelector<Users, String> getLoginSelector() {
        return loginSelector;
    }

    public PropertySelector<Users, String> getPasswordSelector() {
        return passwordSelector;
    }

    public PropertySelector<Users, String> getFirstnameSelector() {
        return firstnameSelector;
    }

    public PropertySelector<Users, String> getLastnameSelector() {
        return lastnameSelector;
    }

    public PropertySelector<Users, String> getEmailSelector() {
        return emailSelector;
    }

    public PropertySelector<Users, String> getLangueSelector() {
        return langueSelector;
    }

    // Relation selectors
    public PropertySelector<Users, Roles> getRoleSelector() {
        return roleSelector;
    }
}
