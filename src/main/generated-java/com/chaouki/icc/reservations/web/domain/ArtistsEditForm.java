/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Artists;
import com.chaouki.icc.reservations.domain.Artists_;
import com.chaouki.icc.reservations.domain.Types;
import com.chaouki.icc.reservations.repository.ArtistsRepository;
import com.chaouki.icc.reservations.web.domain.support.GenericEditForm;
import com.chaouki.icc.reservations.web.domain.support.GenericToManyAssociation;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.chaouki.icc.reservations.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Artists}.
 */
@Named
@ConversationContextScoped
public class ArtistsEditForm extends GenericEditForm<Artists, Integer> {
    @Inject
    protected ArtistsController artistsController;
    @Inject
    protected TypesController typesController;
    protected GenericToManyAssociation<Types, Integer> types;
    protected TabBean tabBean = new TabBean();

    @Inject
    public ArtistsEditForm(ArtistsRepository artistsRepository, ArtistsGraphLoader artistsGraphLoader) {
        super(artistsRepository, artistsGraphLoader);
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public Artists getArtists() {
        return getEntity();
    }

    public String print() {
        return artistsController.print(getArtists());
    }

    @PostConstruct
    void setupTypesActions() {
        types = new GenericToManyAssociation<Types, Integer>(getArtists().getTypes(), typesController, Artists_.types) {
            @Override
            protected void remove(Types types) {
                getArtists().removeType(types);
            }

            @Override
            protected void add(Types types) {
                // add the object only to the type side of the relation 
                getArtists().getTypes().add(types);
            }
        };
    }

    public GenericToManyAssociation<Types, Integer> getTypes() {
        return types;
    }
}
