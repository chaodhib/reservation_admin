/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.chaouki.icc.reservations.domain.RepresentationUser;
import com.chaouki.icc.reservations.domain.RepresentationUser_;
import com.chaouki.icc.reservations.domain.Representations;
import com.chaouki.icc.reservations.domain.Users;
import com.chaouki.icc.reservations.repository.RepresentationUserRepository;
import com.chaouki.icc.reservations.web.domain.support.GenericEditForm;
import com.chaouki.icc.reservations.web.domain.support.GenericToOneAssociation;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;

/**
 * View Helper/Controller to edit {@link RepresentationUser}.
 */
@Named
@ConversationContextScoped
public class RepresentationUserEditForm extends GenericEditForm<RepresentationUser, Integer> {
    @Inject
    protected RepresentationUserController representationUserController;
    @Inject
    protected UsersController usersController;
    protected GenericToOneAssociation<Users, Integer> user;
    @Inject
    protected RepresentationsController representationsController;
    protected GenericToOneAssociation<Representations, Integer> representation;

    @Inject
    public RepresentationUserEditForm(RepresentationUserRepository representationUserRepository, RepresentationUserGraphLoader representationUserGraphLoader) {
        super(representationUserRepository, representationUserGraphLoader);
    }

    /**
     * The entity to edit/view.
     */
    public RepresentationUser getRepresentationUser() {
        return getEntity();
    }

    public String print() {
        return representationUserController.print(getRepresentationUser());
    }

    @PostConstruct
    void setupUserActions() {
        user = new GenericToOneAssociation<Users, Integer>(usersController, RepresentationUser_.user) {
            @Override
            protected Users get() {
                return getRepresentationUser().getUser();
            }

            @Override
            protected void set(Users users) {
                getRepresentationUser().setUser(users);
            }

            @NotNull
            @Override
            public Users getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Users, Integer> getUser() {
        return user;
    }

    @PostConstruct
    void setupRepresentationActions() {
        representation = new GenericToOneAssociation<Representations, Integer>(representationsController, RepresentationUser_.representation) {
            @Override
            protected Representations get() {
                return getRepresentationUser().getRepresentation();
            }

            @Override
            protected void set(Representations representations) {
                getRepresentationUser().setRepresentation(representations);
            }

            @NotNull
            @Override
            public Representations getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Representations, Integer> getRepresentation() {
        return representation;
    }
}
