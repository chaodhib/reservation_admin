/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.chaouki.icc.reservations.domain.Locality;
import com.chaouki.icc.reservations.domain.Locations;
import com.chaouki.icc.reservations.domain.Locations_;
import com.chaouki.icc.reservations.repository.LocationsRepository;
import com.chaouki.icc.reservations.web.domain.support.GenericEditForm;
import com.chaouki.icc.reservations.web.domain.support.GenericToOneAssociation;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;

/**
 * View Helper/Controller to edit {@link Locations}.
 */
@Named
@ConversationContextScoped
public class LocationsEditForm extends GenericEditForm<Locations, Integer> {
    @Inject
    protected LocationsController locationsController;
    @Inject
    protected LocalityController localityController;
    protected GenericToOneAssociation<Locality, Integer> locality;

    @Inject
    public LocationsEditForm(LocationsRepository locationsRepository, LocationsGraphLoader locationsGraphLoader) {
        super(locationsRepository, locationsGraphLoader);
    }

    /**
     * The entity to edit/view.
     */
    public Locations getLocations() {
        return getEntity();
    }

    public String print() {
        return locationsController.print(getLocations());
    }

    @PostConstruct
    void setupLocalityActions() {
        locality = new GenericToOneAssociation<Locality, Integer>(localityController, Locations_.locality) {
            @Override
            protected Locality get() {
                return getLocations().getLocality();
            }

            @Override
            protected void set(Locality locality) {
                getLocations().setLocality(locality);
            }

            @NotNull
            @Override
            public Locality getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Locality, Integer> getLocality() {
        return locality;
    }
}
