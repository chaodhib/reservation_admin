/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.chaouki.icc.reservations.domain.Artists;
import com.chaouki.icc.reservations.domain.CastMember;
import com.chaouki.icc.reservations.domain.CastMember_;
import com.chaouki.icc.reservations.domain.Shows;
import com.chaouki.icc.reservations.domain.Types;
import com.chaouki.icc.reservations.repository.CastMemberRepository;
import com.chaouki.icc.reservations.web.domain.support.GenericEditForm;
import com.chaouki.icc.reservations.web.domain.support.GenericToOneAssociation;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;

/**
 * View Helper/Controller to edit {@link CastMember}.
 */
@Named
@ConversationContextScoped
public class CastMemberEditForm extends GenericEditForm<CastMember, Integer> {
    @Inject
    protected CastMemberController castMemberController;
    @Inject
    protected ArtistsController artistsController;
    protected GenericToOneAssociation<Artists, Integer> artist;
    @Inject
    protected TypesController typesController;
    protected GenericToOneAssociation<Types, Integer> type;
    @Inject
    protected ShowsController showsController;
    protected GenericToOneAssociation<Shows, Integer> show;

    @Inject
    public CastMemberEditForm(CastMemberRepository castMemberRepository, CastMemberGraphLoader castMemberGraphLoader) {
        super(castMemberRepository, castMemberGraphLoader);
    }

    /**
     * The entity to edit/view.
     */
    public CastMember getCastMember() {
        return getEntity();
    }

    public String print() {
        return castMemberController.print(getCastMember());
    }

    @PostConstruct
    void setupArtistActions() {
        artist = new GenericToOneAssociation<Artists, Integer>(artistsController, CastMember_.artist) {
            @Override
            protected Artists get() {
                return getCastMember().getArtist();
            }

            @Override
            protected void set(Artists artists) {
                getCastMember().setArtist(artists);
            }

            @NotNull
            @Override
            public Artists getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Artists, Integer> getArtist() {
        return artist;
    }

    @PostConstruct
    void setupTypeActions() {
        type = new GenericToOneAssociation<Types, Integer>(typesController, CastMember_.type) {
            @Override
            protected Types get() {
                return getCastMember().getType();
            }

            @Override
            protected void set(Types types) {
                getCastMember().setType(types);
            }

            @NotNull
            @Override
            public Types getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Types, Integer> getType() {
        return type;
    }

    @PostConstruct
    void setupShowActions() {
        show = new GenericToOneAssociation<Shows, Integer>(showsController, CastMember_.show) {
            @Override
            protected Shows get() {
                return getCastMember().getShow();
            }

            @Override
            protected void set(Shows shows) {
                getCastMember().setShow(shows);
            }

            @NotNull
            @Override
            public Shows getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Shows, Integer> getShow() {
        return show;
    }
}
