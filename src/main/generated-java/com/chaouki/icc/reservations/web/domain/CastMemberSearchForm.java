/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Artists;
import com.chaouki.icc.reservations.domain.CastMember;
import com.chaouki.icc.reservations.domain.CastMember_;
import com.chaouki.icc.reservations.domain.Shows;
import com.chaouki.icc.reservations.domain.Types;
import com.chaouki.icc.reservations.web.domain.support.GenericSearchForm;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link CastMember}.
 * It exposes a {@link CastMember} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class CastMemberSearchForm extends GenericSearchForm<CastMember, Integer, CastMemberSearchForm> {
    private static final long serialVersionUID = 1L;
    protected CastMember castMember = new CastMember();
    protected PropertySelector<CastMember, Artists> artistSelector = newPropertySelector(CastMember_.artist);
    protected PropertySelector<CastMember, Types> typeSelector = newPropertySelector(CastMember_.type);
    protected PropertySelector<CastMember, Shows> showSelector = newPropertySelector(CastMember_.show);

    public CastMember getCastMember() {
        return castMember;
    }

    @Override
    protected CastMember getEntity() {
        return getCastMember();
    }

    @Override
    public CastMemberSearchForm newInstance() {
        return new CastMemberSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.property(artistSelector, typeSelector, showSelector);
        return sp;
    }

    @Override
    public void resetWithOther(CastMemberSearchForm other) {
        this.castMember = other.getCastMember();
        this.artistSelector = other.getArtistSelector();
        this.typeSelector = other.getTypeSelector();
        this.showSelector = other.getShowSelector();
    }

    // Relation selectors
    public PropertySelector<CastMember, Artists> getArtistSelector() {
        return artistSelector;
    }

    public PropertySelector<CastMember, Types> getTypeSelector() {
        return typeSelector;
    }

    public PropertySelector<CastMember, Shows> getShowSelector() {
        return showSelector;
    }
}
