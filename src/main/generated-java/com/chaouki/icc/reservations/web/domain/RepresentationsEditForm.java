/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import com.chaouki.icc.reservations.domain.Locations;
import com.chaouki.icc.reservations.domain.Representations;
import com.chaouki.icc.reservations.domain.Representations_;
import com.chaouki.icc.reservations.domain.Shows;
import com.chaouki.icc.reservations.repository.RepresentationsRepository;
import com.chaouki.icc.reservations.web.domain.support.GenericEditForm;
import com.chaouki.icc.reservations.web.domain.support.GenericToOneAssociation;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;

/**
 * View Helper/Controller to edit {@link Representations}.
 */
@Named
@ConversationContextScoped
public class RepresentationsEditForm extends GenericEditForm<Representations, Integer> {
    @Inject
    protected RepresentationsController representationsController;
    @Inject
    protected ShowsController showsController;
    protected GenericToOneAssociation<Shows, Integer> show;
    @Inject
    protected LocationsController locationsController;
    protected GenericToOneAssociation<Locations, Integer> location;

    @Inject
    public RepresentationsEditForm(RepresentationsRepository representationsRepository, RepresentationsGraphLoader representationsGraphLoader) {
        super(representationsRepository, representationsGraphLoader);
    }

    /**
     * The entity to edit/view.
     */
    public Representations getRepresentations() {
        return getEntity();
    }

    public String print() {
        return representationsController.print(getRepresentations());
    }

    @PostConstruct
    void setupShowActions() {
        show = new GenericToOneAssociation<Shows, Integer>(showsController, Representations_.show) {
            @Override
            protected Shows get() {
                return getRepresentations().getShow();
            }

            @Override
            protected void set(Shows shows) {
                getRepresentations().setShow(shows);
            }

            @NotNull
            @Override
            public Shows getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Shows, Integer> getShow() {
        return show;
    }

    @PostConstruct
    void setupLocationActions() {
        location = new GenericToOneAssociation<Locations, Integer>(locationsController, Representations_.location) {
            @Override
            protected Locations get() {
                return getRepresentations().getLocation();
            }

            @Override
            protected void set(Locations locations) {
                getRepresentations().setLocation(locations);
            }
        };
    }

    public GenericToOneAssociation<Locations, Integer> getLocation() {
        return location;
    }
}
