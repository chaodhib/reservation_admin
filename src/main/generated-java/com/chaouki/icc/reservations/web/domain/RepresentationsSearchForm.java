/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package com.chaouki.icc.reservations.web.domain;

import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;
import static com.jaxio.jpa.querybyexample.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.chaouki.icc.reservations.domain.Locations;
import com.chaouki.icc.reservations.domain.Representations;
import com.chaouki.icc.reservations.domain.Representations_;
import com.chaouki.icc.reservations.domain.Shows;
import com.chaouki.icc.reservations.web.domain.support.GenericSearchForm;
import com.chaouki.icc.reservations.web.faces.ConversationContextScoped;
import com.jaxio.jpa.querybyexample.PropertySelector;
import com.jaxio.jpa.querybyexample.Range;
import com.jaxio.jpa.querybyexample.SearchParameters;

/**
 * View Helper to search {@link Representations}.
 * It exposes a {@link Representations} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class RepresentationsSearchForm extends GenericSearchForm<Representations, Integer, RepresentationsSearchForm> {
    private static final long serialVersionUID = 1L;
    protected Representations representations = new Representations();
    protected Range<Representations, Date> whenRange = newRange(Representations_.when);
    protected PropertySelector<Representations, Shows> showSelector = newPropertySelector(Representations_.show);
    protected PropertySelector<Representations, Locations> locationSelector = newPropertySelector(Representations_.location);

    public Representations getRepresentations() {
        return representations;
    }

    @Override
    protected Representations getEntity() {
        return getRepresentations();
    }

    @Override
    public RepresentationsSearchForm newInstance() {
        return new RepresentationsSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(whenRange);
        sp.property(showSelector, locationSelector);
        return sp;
    }

    @Override
    public void resetWithOther(RepresentationsSearchForm other) {
        this.representations = other.getRepresentations();
        this.whenRange = other.getWhenRange();
        this.showSelector = other.getShowSelector();
        this.locationSelector = other.getLocationSelector();
    }

    // Ranges
    public Range<Representations, Date> getWhenRange() {
        return whenRange;
    }

    // Relation selectors
    public PropertySelector<Representations, Shows> getShowSelector() {
        return showSelector;
    }

    public PropertySelector<Representations, Locations> getLocationSelector() {
        return locationSelector;
    }
}
